/* tslint:disable */
/* eslint-disable */
/**
 * Midgard API Docs
 * This is the docs for midgard api for argonaut
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { V1Volume } from './v1-volume';
import { V1alpha1ArtifactRepositoryRefStatus } from './v1alpha1-artifact-repository-ref-status';
import { V1alpha1Condition } from './v1alpha1-condition';
import { V1alpha1NodeStatus } from './v1alpha1-node-status';
import { V1alpha1Outputs } from './v1alpha1-outputs';
import { V1alpha1SynchronizationStatus } from './v1alpha1-synchronization-status';
import { V1alpha1Template } from './v1alpha1-template';
import { V1alpha1WorkflowSpec } from './v1alpha1-workflow-spec';

/**
 * 
 * @export
 * @interface V1alpha1WorkflowStatus
 */
export interface V1alpha1WorkflowStatus {
    /**
     * 
     * @type {V1alpha1ArtifactRepositoryRefStatus}
     * @memberof V1alpha1WorkflowStatus
     */
    artifactRepositoryRef?: V1alpha1ArtifactRepositoryRefStatus;
    /**
     * Compressed and base64 decoded Nodes map
     * @type {string}
     * @memberof V1alpha1WorkflowStatus
     */
    compressedNodes?: string;
    /**
     * Conditions is a list of conditions the Workflow may have
     * @type {Array<V1alpha1Condition>}
     * @memberof V1alpha1WorkflowStatus
     */
    conditions?: Array<V1alpha1Condition>;
    /**
     * EstimatedDuration in seconds.
     * @type {number}
     * @memberof V1alpha1WorkflowStatus
     */
    estimatedDuration?: number;
    /**
     * Time at which this workflow completed
     * @type {string}
     * @memberof V1alpha1WorkflowStatus
     */
    finishedAt?: string;
    /**
     * A human readable message indicating details about why the workflow is in this condition.
     * @type {string}
     * @memberof V1alpha1WorkflowStatus
     */
    message?: string;
    /**
     * 
     * @type {{ [key: string]: V1alpha1NodeStatus; }}
     * @memberof V1alpha1WorkflowStatus
     */
    nodes?: { [key: string]: V1alpha1NodeStatus; };
    /**
     * Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.
     * @type {string}
     * @memberof V1alpha1WorkflowStatus
     */
    offloadNodeStatusVersion?: string;
    /**
     * 
     * @type {V1alpha1Outputs}
     * @memberof V1alpha1WorkflowStatus
     */
    outputs?: V1alpha1Outputs;
    /**
     * PersistentVolumeClaims tracks all PVCs that were created as part of the workflow. The contents of this list are drained at the end of the workflow.
     * @type {Array<V1Volume>}
     * @memberof V1alpha1WorkflowStatus
     */
    persistentVolumeClaims?: Array<V1Volume>;
    /**
     * Phase a simple, high-level summary of where the workflow is in its lifecycle.
     * @type {string}
     * @memberof V1alpha1WorkflowStatus
     */
    phase?: string;
    /**
     * Progress to completion
     * @type {string}
     * @memberof V1alpha1WorkflowStatus
     */
    progress?: string;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof V1alpha1WorkflowStatus
     */
    resourcesDuration?: { [key: string]: number; };
    /**
     * Time at which this workflow started
     * @type {string}
     * @memberof V1alpha1WorkflowStatus
     */
    startedAt?: string;
    /**
     * StoredTemplates is a mapping between a template ref and the node\'s status.
     * @type {{ [key: string]: V1alpha1Template; }}
     * @memberof V1alpha1WorkflowStatus
     */
    storedTemplates?: { [key: string]: V1alpha1Template; };
    /**
     * 
     * @type {V1alpha1WorkflowSpec}
     * @memberof V1alpha1WorkflowStatus
     */
    storedWorkflowTemplateSpec?: V1alpha1WorkflowSpec;
    /**
     * 
     * @type {V1alpha1SynchronizationStatus}
     * @memberof V1alpha1WorkflowStatus
     */
    synchronization?: V1alpha1SynchronizationStatus;
}


