/* tslint:disable */
/* eslint-disable */
/**
 * Midgard API Docs
 * This is the docs for midgard api for argonaut
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { V1Affinity } from './v1-affinity';
import { V1HostAlias } from './v1-host-alias';
import { V1LocalObjectReference } from './v1-local-object-reference';
import { V1PersistentVolumeClaim } from './v1-persistent-volume-claim';
import { V1PodDNSConfig } from './v1-pod-dnsconfig';
import { V1PodSecurityContext } from './v1-pod-security-context';
import { V1Toleration } from './v1-toleration';
import { V1Volume } from './v1-volume';
import { V1alpha1Arguments } from './v1alpha1-arguments';
import { V1alpha1ArtifactRepositoryRef } from './v1alpha1-artifact-repository-ref';
import { V1alpha1ExecutorConfig } from './v1alpha1-executor-config';
import { V1alpha1Metadata } from './v1alpha1-metadata';
import { V1alpha1Metrics } from './v1alpha1-metrics';
import { V1alpha1PodGC } from './v1alpha1-pod-gc';
import { V1alpha1RetryStrategy } from './v1alpha1-retry-strategy';
import { V1alpha1Synchronization } from './v1alpha1-synchronization';
import { V1alpha1TTLStrategy } from './v1alpha1-ttlstrategy';
import { V1alpha1Template } from './v1alpha1-template';
import { V1alpha1VolumeClaimGC } from './v1alpha1-volume-claim-gc';
import { V1alpha1WorkflowTemplateRef } from './v1alpha1-workflow-template-ref';
import { V1beta1PodDisruptionBudgetSpec } from './v1beta1-pod-disruption-budget-spec';

/**
 * 
 * @export
 * @interface V1alpha1WorkflowSpec
 */
export interface V1alpha1WorkflowSpec {
    /**
     * Optional duration in seconds relative to the workflow start time which the workflow is allowed to run before the controller terminates the workflow. A value of zero is used to terminate a Running workflow
     * @type {number}
     * @memberof V1alpha1WorkflowSpec
     */
    activeDeadlineSeconds?: number;
    /**
     * 
     * @type {V1Affinity}
     * @memberof V1alpha1WorkflowSpec
     */
    affinity?: V1Affinity;
    /**
     * ArchiveLogs indicates if the container logs should be archived
     * @type {boolean}
     * @memberof V1alpha1WorkflowSpec
     */
    archiveLogs?: boolean;
    /**
     * 
     * @type {V1alpha1Arguments}
     * @memberof V1alpha1WorkflowSpec
     */
    arguments?: V1alpha1Arguments;
    /**
     * 
     * @type {V1alpha1ArtifactRepositoryRef}
     * @memberof V1alpha1WorkflowSpec
     */
    artifactRepositoryRef?: V1alpha1ArtifactRepositoryRef;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.
     * @type {boolean}
     * @memberof V1alpha1WorkflowSpec
     */
    automountServiceAccountToken?: boolean;
    /**
     * 
     * @type {V1PodDNSConfig}
     * @memberof V1alpha1WorkflowSpec
     */
    dnsConfig?: V1PodDNSConfig;
    /**
     * Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are \'ClusterFirstWithHostNet\', \'ClusterFirst\', \'Default\' or \'None\'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to \'ClusterFirstWithHostNet\'.
     * @type {string}
     * @memberof V1alpha1WorkflowSpec
     */
    dnsPolicy?: string;
    /**
     * Entrypoint is a template reference to the starting point of the workflow.
     * @type {string}
     * @memberof V1alpha1WorkflowSpec
     */
    entrypoint?: string;
    /**
     * 
     * @type {V1alpha1ExecutorConfig}
     * @memberof V1alpha1WorkflowSpec
     */
    executor?: V1alpha1ExecutorConfig;
    /**
     * +patchStrategy=merge +patchMergeKey=ip
     * @type {Array<V1HostAlias>}
     * @memberof V1alpha1WorkflowSpec
     */
    hostAliases?: Array<V1HostAlias>;
    /**
     * Host networking requested for this workflow pod. Default to false.
     * @type {boolean}
     * @memberof V1alpha1WorkflowSpec
     */
    hostNetwork?: boolean;
    /**
     * ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod +patchStrategy=merge +patchMergeKey=name
     * @type {Array<V1LocalObjectReference>}
     * @memberof V1alpha1WorkflowSpec
     */
    imagePullSecrets?: Array<V1LocalObjectReference>;
    /**
     * 
     * @type {V1alpha1Metrics}
     * @memberof V1alpha1WorkflowSpec
     */
    metrics?: V1alpha1Metrics;
    /**
     * NodeSelector is a selector which will result in all pods of the workflow to be scheduled on the selected node(s). This is able to be overridden by a nodeSelector specified in the template.
     * @type {{ [key: string]: string; }}
     * @memberof V1alpha1WorkflowSpec
     */
    nodeSelector?: { [key: string]: string; };
    /**
     * OnExit is a template reference which is invoked at the end of the workflow, irrespective of the success, failure, or error of the primary workflow.
     * @type {string}
     * @memberof V1alpha1WorkflowSpec
     */
    onExit?: string;
    /**
     * Parallelism limits the max total parallel pods that can execute at the same time in a workflow
     * @type {number}
     * @memberof V1alpha1WorkflowSpec
     */
    parallelism?: number;
    /**
     * 
     * @type {V1beta1PodDisruptionBudgetSpec}
     * @memberof V1alpha1WorkflowSpec
     */
    podDisruptionBudget?: V1beta1PodDisruptionBudgetSpec;
    /**
     * 
     * @type {V1alpha1PodGC}
     * @memberof V1alpha1WorkflowSpec
     */
    podGC?: V1alpha1PodGC;
    /**
     * 
     * @type {V1alpha1Metadata}
     * @memberof V1alpha1WorkflowSpec
     */
    podMetadata?: V1alpha1Metadata;
    /**
     * Priority to apply to workflow pods.
     * @type {number}
     * @memberof V1alpha1WorkflowSpec
     */
    podPriority?: number;
    /**
     * PriorityClassName to apply to workflow pods.
     * @type {string}
     * @memberof V1alpha1WorkflowSpec
     */
    podPriorityClassName?: string;
    /**
     * PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).
     * @type {string}
     * @memberof V1alpha1WorkflowSpec
     */
    podSpecPatch?: string;
    /**
     * Priority is used if controller is configured to process limited number of workflows in parallel. Workflows with higher priority are processed first.
     * @type {number}
     * @memberof V1alpha1WorkflowSpec
     */
    priority?: number;
    /**
     * 
     * @type {V1alpha1RetryStrategy}
     * @memberof V1alpha1WorkflowSpec
     */
    retryStrategy?: V1alpha1RetryStrategy;
    /**
     * Set scheduler name for all pods. Will be overridden if container/script template\'s scheduler name is set. Default scheduler will be used if neither specified. +optional
     * @type {string}
     * @memberof V1alpha1WorkflowSpec
     */
    schedulerName?: string;
    /**
     * 
     * @type {V1PodSecurityContext}
     * @memberof V1alpha1WorkflowSpec
     */
    securityContext?: V1PodSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to run all pods of the workflow as.
     * @type {string}
     * @memberof V1alpha1WorkflowSpec
     */
    serviceAccountName?: string;
    /**
     * Shutdown will shutdown the workflow according to its ShutdownStrategy
     * @type {string}
     * @memberof V1alpha1WorkflowSpec
     */
    shutdown?: string;
    /**
     * Suspend will suspend the workflow and prevent execution of any future steps in the workflow
     * @type {boolean}
     * @memberof V1alpha1WorkflowSpec
     */
    suspend?: boolean;
    /**
     * 
     * @type {V1alpha1Synchronization}
     * @memberof V1alpha1WorkflowSpec
     */
    synchronization?: V1alpha1Synchronization;
    /**
     * 
     * @type {V1alpha1Template}
     * @memberof V1alpha1WorkflowSpec
     */
    templateDefaults?: V1alpha1Template;
    /**
     * Templates is a list of workflow templates used in a workflow +patchStrategy=merge +patchMergeKey=name
     * @type {Array<V1alpha1Template>}
     * @memberof V1alpha1WorkflowSpec
     */
    templates?: Array<V1alpha1Template>;
    /**
     * Tolerations to apply to workflow pods. +patchStrategy=merge +patchMergeKey=key
     * @type {Array<V1Toleration>}
     * @memberof V1alpha1WorkflowSpec
     */
    tolerations?: Array<V1Toleration>;
    /**
     * 
     * @type {V1alpha1TTLStrategy}
     * @memberof V1alpha1WorkflowSpec
     */
    ttlStrategy?: V1alpha1TTLStrategy;
    /**
     * 
     * @type {V1alpha1VolumeClaimGC}
     * @memberof V1alpha1WorkflowSpec
     */
    volumeClaimGC?: V1alpha1VolumeClaimGC;
    /**
     * VolumeClaimTemplates is a list of claims that containers are allowed to reference. The Workflow controller will create the claims at the beginning of the workflow and delete the claims upon completion of the workflow +patchStrategy=merge +patchMergeKey=name
     * @type {Array<V1PersistentVolumeClaim>}
     * @memberof V1alpha1WorkflowSpec
     */
    volumeClaimTemplates?: Array<V1PersistentVolumeClaim>;
    /**
     * Volumes is a list of volumes that can be mounted by containers in a workflow. +patchStrategy=merge +patchMergeKey=name
     * @type {Array<V1Volume>}
     * @memberof V1alpha1WorkflowSpec
     */
    volumes?: Array<V1Volume>;
    /**
     * 
     * @type {V1alpha1WorkflowTemplateRef}
     * @memberof V1alpha1WorkflowSpec
     */
    workflowTemplateRef?: V1alpha1WorkflowTemplateRef;
}


