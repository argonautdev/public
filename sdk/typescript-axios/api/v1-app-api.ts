/* tslint:disable */
/* eslint-disable */
/**
 * Midgard API Docs
 * This is the docs for midgard api for argonaut
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponseDefault } from '../models';
// @ts-ignore
import { ReleaseRelease } from '../models';
// @ts-ignore
import { TypesAppDeleteRequest } from '../models';
// @ts-ignore
import { TypesAppDeleteResponse } from '../models';
// @ts-ignore
import { TypesAppDeployRequest } from '../models';
/**
 * V1AppApi - axios parameter creator
 * @export
 */
export const V1AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an app
         * @param {TypesAppDeleteRequest} body App delete request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDelete: async (body: TypesAppDeleteRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('appDelete', 'body', body)
            const localVarPath = `/appDelete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deploys an app using the art.yaml file
         * @param {TypesAppDeployRequest} body App deploy request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDeploy: async (body: TypesAppDeployRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('appDeploy', 'body', body)
            const localVarPath = `/appDeploy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1AppApi - functional programming interface
 * @export
 */
export const V1AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an app
         * @param {TypesAppDeleteRequest} body App delete request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appDelete(body: TypesAppDeleteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TypesAppDeleteResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appDelete(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deploys an app using the art.yaml file
         * @param {TypesAppDeployRequest} body App deploy request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appDeploy(body: TypesAppDeployRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleaseRelease>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appDeploy(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1AppApi - factory interface
 * @export
 */
export const V1AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1AppApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an app
         * @param {TypesAppDeleteRequest} body App delete request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDelete(body: TypesAppDeleteRequest, options?: any): AxiosPromise<Array<TypesAppDeleteResponse>> {
            return localVarFp.appDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deploys an app using the art.yaml file
         * @param {TypesAppDeployRequest} body App deploy request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appDeploy(body: TypesAppDeployRequest, options?: any): AxiosPromise<ReleaseRelease> {
            return localVarFp.appDeploy(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for appDelete operation in V1AppApi.
 * @export
 * @interface V1AppApiAppDeleteRequest
 */
export interface V1AppApiAppDeleteRequest {
    /**
     * App delete request
     * @type {TypesAppDeleteRequest}
     * @memberof V1AppApiAppDelete
     */
    readonly body: TypesAppDeleteRequest
}

/**
 * Request parameters for appDeploy operation in V1AppApi.
 * @export
 * @interface V1AppApiAppDeployRequest
 */
export interface V1AppApiAppDeployRequest {
    /**
     * App deploy request
     * @type {TypesAppDeployRequest}
     * @memberof V1AppApiAppDeploy
     */
    readonly body: TypesAppDeployRequest
}

/**
 * V1AppApi - object-oriented interface
 * @export
 * @class V1AppApi
 * @extends {BaseAPI}
 */
export class V1AppApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an app
     * @param {V1AppApiAppDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AppApi
     */
    public appDelete(requestParameters: V1AppApiAppDeleteRequest, options?: any) {
        return V1AppApiFp(this.configuration).appDelete(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deploys an app using the art.yaml file
     * @param {V1AppApiAppDeployRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AppApi
     */
    public appDeploy(requestParameters: V1AppApiAppDeployRequest, options?: any) {
        return V1AppApiFp(this.configuration).appDeploy(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
