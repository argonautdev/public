/* tslint:disable */
/* eslint-disable */
/**
 * Midgard API Docs
 * This is the docs for midgard api for argonaut
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { V1ConfigMap } from '../models';
// @ts-ignore
import { V1Secret } from '../models';
/**
 * V1KubernetesApi - axios parameter creator
 * @export
 */
export const V1KubernetesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Wrapper around k8s api to make calls
         * @param {string} cluster Cluster name
         * @param {string} region The region of the cluster
         * @param {string} url Url to send request to k8s
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kubernetesApiCaller: async (cluster: string, region: string, url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cluster' is not null or undefined
            assertParamExists('kubernetesApiCaller', 'cluster', cluster)
            // verify required parameter 'region' is not null or undefined
            assertParamExists('kubernetesApiCaller', 'region', region)
            // verify required parameter 'url' is not null or undefined
            assertParamExists('kubernetesApiCaller', 'url', url)
            const localVarPath = `/cluster/{cluster}/region/{region}/kubernetes/{url}`
                .replace(`{${"cluster"}}`, encodeURIComponent(String(cluster)))
                .replace(`{${"region"}}`, encodeURIComponent(String(region)))
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KubernetesConfigMap returns a config-map
         * @param {string} cluster Cluster name
         * @param {string} region The region of the cluster
         * @param {string} namespace Namespace
         * @param {string} name Config Map Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kubernetesConfigMap: async (cluster: string, region: string, namespace: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cluster' is not null or undefined
            assertParamExists('kubernetesConfigMap', 'cluster', cluster)
            // verify required parameter 'region' is not null or undefined
            assertParamExists('kubernetesConfigMap', 'region', region)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('kubernetesConfigMap', 'namespace', namespace)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('kubernetesConfigMap', 'name', name)
            const localVarPath = `/cluster/{cluster}/region/{region}/namespaces/{namespace}/configmaps/{name}`
                .replace(`{${"cluster"}}`, encodeURIComponent(String(cluster)))
                .replace(`{${"region"}}`, encodeURIComponent(String(region)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary KubernetesSecret returns a config-map
         * @param {string} cluster Cluster name
         * @param {string} region The region of the cluster
         * @param {string} namespace Namespace
         * @param {string} name Secret name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kubernetesSecret: async (cluster: string, region: string, namespace: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cluster' is not null or undefined
            assertParamExists('kubernetesSecret', 'cluster', cluster)
            // verify required parameter 'region' is not null or undefined
            assertParamExists('kubernetesSecret', 'region', region)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('kubernetesSecret', 'namespace', namespace)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('kubernetesSecret', 'name', name)
            const localVarPath = `/cluster/{cluster}/region/{region}/namespaces/{namespace}/secrets/{name}`
                .replace(`{${"cluster"}}`, encodeURIComponent(String(cluster)))
                .replace(`{${"region"}}`, encodeURIComponent(String(region)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1KubernetesApi - functional programming interface
 * @export
 */
export const V1KubernetesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1KubernetesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Wrapper around k8s api to make calls
         * @param {string} cluster Cluster name
         * @param {string} region The region of the cluster
         * @param {string} url Url to send request to k8s
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kubernetesApiCaller(cluster: string, region: string, url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kubernetesApiCaller(cluster, region, url, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KubernetesConfigMap returns a config-map
         * @param {string} cluster Cluster name
         * @param {string} region The region of the cluster
         * @param {string} namespace Namespace
         * @param {string} name Config Map Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kubernetesConfigMap(cluster: string, region: string, namespace: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ConfigMap>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kubernetesConfigMap(cluster, region, namespace, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary KubernetesSecret returns a config-map
         * @param {string} cluster Cluster name
         * @param {string} region The region of the cluster
         * @param {string} namespace Namespace
         * @param {string} name Secret name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kubernetesSecret(cluster: string, region: string, namespace: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Secret>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kubernetesSecret(cluster, region, namespace, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1KubernetesApi - factory interface
 * @export
 */
export const V1KubernetesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1KubernetesApiFp(configuration)
    return {
        /**
         * 
         * @summary Wrapper around k8s api to make calls
         * @param {string} cluster Cluster name
         * @param {string} region The region of the cluster
         * @param {string} url Url to send request to k8s
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kubernetesApiCaller(cluster: string, region: string, url: string, options?: any): AxiosPromise<object> {
            return localVarFp.kubernetesApiCaller(cluster, region, url, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KubernetesConfigMap returns a config-map
         * @param {string} cluster Cluster name
         * @param {string} region The region of the cluster
         * @param {string} namespace Namespace
         * @param {string} name Config Map Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kubernetesConfigMap(cluster: string, region: string, namespace: string, name: string, options?: any): AxiosPromise<V1ConfigMap> {
            return localVarFp.kubernetesConfigMap(cluster, region, namespace, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary KubernetesSecret returns a config-map
         * @param {string} cluster Cluster name
         * @param {string} region The region of the cluster
         * @param {string} namespace Namespace
         * @param {string} name Secret name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kubernetesSecret(cluster: string, region: string, namespace: string, name: string, options?: any): AxiosPromise<V1Secret> {
            return localVarFp.kubernetesSecret(cluster, region, namespace, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for kubernetesApiCaller operation in V1KubernetesApi.
 * @export
 * @interface V1KubernetesApiKubernetesApiCallerRequest
 */
export interface V1KubernetesApiKubernetesApiCallerRequest {
    /**
     * Cluster name
     * @type {string}
     * @memberof V1KubernetesApiKubernetesApiCaller
     */
    readonly cluster: string

    /**
     * The region of the cluster
     * @type {string}
     * @memberof V1KubernetesApiKubernetesApiCaller
     */
    readonly region: string

    /**
     * Url to send request to k8s
     * @type {string}
     * @memberof V1KubernetesApiKubernetesApiCaller
     */
    readonly url: string
}

/**
 * Request parameters for kubernetesConfigMap operation in V1KubernetesApi.
 * @export
 * @interface V1KubernetesApiKubernetesConfigMapRequest
 */
export interface V1KubernetesApiKubernetesConfigMapRequest {
    /**
     * Cluster name
     * @type {string}
     * @memberof V1KubernetesApiKubernetesConfigMap
     */
    readonly cluster: string

    /**
     * The region of the cluster
     * @type {string}
     * @memberof V1KubernetesApiKubernetesConfigMap
     */
    readonly region: string

    /**
     * Namespace
     * @type {string}
     * @memberof V1KubernetesApiKubernetesConfigMap
     */
    readonly namespace: string

    /**
     * Config Map Name
     * @type {string}
     * @memberof V1KubernetesApiKubernetesConfigMap
     */
    readonly name: string
}

/**
 * Request parameters for kubernetesSecret operation in V1KubernetesApi.
 * @export
 * @interface V1KubernetesApiKubernetesSecretRequest
 */
export interface V1KubernetesApiKubernetesSecretRequest {
    /**
     * Cluster name
     * @type {string}
     * @memberof V1KubernetesApiKubernetesSecret
     */
    readonly cluster: string

    /**
     * The region of the cluster
     * @type {string}
     * @memberof V1KubernetesApiKubernetesSecret
     */
    readonly region: string

    /**
     * Namespace
     * @type {string}
     * @memberof V1KubernetesApiKubernetesSecret
     */
    readonly namespace: string

    /**
     * Secret name
     * @type {string}
     * @memberof V1KubernetesApiKubernetesSecret
     */
    readonly name: string
}

/**
 * V1KubernetesApi - object-oriented interface
 * @export
 * @class V1KubernetesApi
 * @extends {BaseAPI}
 */
export class V1KubernetesApi extends BaseAPI {
    /**
     * 
     * @summary Wrapper around k8s api to make calls
     * @param {V1KubernetesApiKubernetesApiCallerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1KubernetesApi
     */
    public kubernetesApiCaller(requestParameters: V1KubernetesApiKubernetesApiCallerRequest, options?: any) {
        return V1KubernetesApiFp(this.configuration).kubernetesApiCaller(requestParameters.cluster, requestParameters.region, requestParameters.url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KubernetesConfigMap returns a config-map
     * @param {V1KubernetesApiKubernetesConfigMapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1KubernetesApi
     */
    public kubernetesConfigMap(requestParameters: V1KubernetesApiKubernetesConfigMapRequest, options?: any) {
        return V1KubernetesApiFp(this.configuration).kubernetesConfigMap(requestParameters.cluster, requestParameters.region, requestParameters.namespace, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary KubernetesSecret returns a config-map
     * @param {V1KubernetesApiKubernetesSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1KubernetesApi
     */
    public kubernetesSecret(requestParameters: V1KubernetesApiKubernetesSecretRequest, options?: any) {
        return V1KubernetesApiFp(this.configuration).kubernetesSecret(requestParameters.cluster, requestParameters.region, requestParameters.namespace, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }
}
